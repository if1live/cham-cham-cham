CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )
PROJECT( dokuro )

LIST( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake" )
INCLUDE( pch_support )
INCLUDE( compiler_option )

SET( DOKURO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )
SET( DOKURO_TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/test )
SET( DOKURO_RES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/res )
SET( DOKURO_EXT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ext )
SET( DOKURO_EXE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/exe )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin" )

IF( APPLE )
	SET( CMAKE_FIND_ROOT_PATH ${CMAKE_OSX_SYSROOT} )
ENDIF(  )

MACRO( APPEND_LINK_LIBS )
	LIST( APPEND DOKURO_LINK_LIBS ${ARGN} )
ENDMACRO( APPEND_LINK_LIBS )

AUX_SOURCE_DIRECTORY( ${DOKURO_EXE_DIR} DOKURO_EXE_FILES )

#########################################################
# Add Irrlight engine
ADD_SUBDIRECTORY( ${DOKURO_EXT_DIR}/irrlicht )

INCLUDE_DIRECTORIES( ${IRRLICHT_INC_DIR} )

APPEND_LINK_LIBS( irrlicht_shared )

# Add LibOVR
ADD_SUBDIRECTORY( ${DOKURO_EXT_DIR}/libovr )

INCLUDE_DIRECTORIES( ${LIBOVR_INC_DIR} )

APPEND_LINK_LIBS( LibOVR )

# Add Google Test
ADD_SUBDIRECTORY( ${DOKURO_EXT_DIR}/googletest )

INCLUDE_DIRECTORIES( ${DOKURO_EXT_DIR}/googletest/include )

# Add OpenAL
FIND_PACKAGE( openal )
SET( OPENAL_ROOT ${DOKURO_EXT_DIR}/openal )
IF( NOT OPENAL_FOUND )
	ADD_SUBDIRECTORY( ${OPENAL_ROOT}/OpenAL-Soft )

	SET( OPENAL_INCLUDE_DIR "${OPENAL_ROOT}/include" "${OPENAL_ROOT}/include/AL")
ENDIF(  )
INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR} )

APPEND_LINK_LIBS( ${OPENAL_LIBRARY} )

# Add ALUT
ADD_SUBDIRECTORY( ${OPENAL_ROOT}/alut )

INCLUDE_DIRECTORIES( ${OPENAL_ROOT}/alut/include )

APPEND_LINK_LIBS( alut )

# Add Ext Inlcude
INCLUDE_DIRECTORIES( ${DOKURO_EXT_DIR}/loki )
#########################################################

# Set Include Path
INCLUDE_DIRECTORIES( ${DOKURO_SRC_DIR} )

IF( MSVC )
	APPEND_LINK_LIBS( Setupapi winmm )
ENDIF()

IF( APPLE )
	LIST( APPEND DOKURO_RES_FILES ${DOKURO_RES_DIR}/OSX/MainMenu.nib )
	SET( DOKURO_EXE_OPTION MACOSX_BUNDLE )
ELSE(  )
ENDIF(  )

# File List
FILE( GLOB DOKURO_SRC_FILES
    "${DOKURO_SRC_DIR}/*.*" )
FILE( GLOB DOKURO_BASE_SRC_FILES 
	"${DOKURO_SRC_DIR}/base/*.*" )
FILE( GLOB DOKURO_GAME_SRC_FILES 
	"${DOKURO_SRC_DIR}/game/*.*" )
FILE( GLOB DOKURO_UTIL_SRC_FILES 
	"${DOKURO_SRC_DIR}/util/*.*" )
	
FILE( GLOB DOKURO_TEST_SRC_FILES 
	"${DOKURO_TEST_DIR}/*.*" )
FILE( GLOB DOKURO_TEST_BASE_SRC_FILES 
	"${DOKURO_TEST_DIR}/base/*.*" )
FILE( GLOB DOKURO_TEST_GAME_SRC_FILES 
	"${DOKURO_TEST_DIR}/game/*.*" )
FILE( GLOB DOKURO_TEST_UTIL_SRC_FILES 
	"${DOKURO_TEST_DIR}/util/*.*" )
	
ADD_LIBRARY( dokuro 
	${DOKURO_SRC_FILES}
	${DOKURO_BASE_SRC_FILES}
	${DOKURO_GAME_SRC_FILES}
	${DOKURO_UTIL_SRC_FILES}
	${DOKURO_RES_FILES} )
	
MSVC_SET_PCH( dokuro
    "${DOKURO_SRC_DIR}/stdafx.h"
    "${DOKURO_SRC_DIR}/stdafx.cpp")

SOURCE_GROUP( "" FILES ${DOKURO_SRC_FILES} )
SOURCE_GROUP( base FILES ${DOKURO_BASE_SRC_FILES} )
SOURCE_GROUP( game FILES ${DOKURO_GAME_SRC_FILES} )
SOURCE_GROUP( util FILES ${DOKURO_UTIL_SRC_FILES} )

ADD_EXECUTABLE( dokuro_exe 
	${DOKURO_EXE_OPTION}
	${DOKURO_EXE_FILES} )
	
SOURCE_GROUP( "" FILES ${DOKURO_EXE_FILES} )

TARGET_LINK_LIBRARIES( dokuro_exe
	${DOKURO_LINK_LIBS}
	${IRRLICHT_LINK_LIBS}
	dokuro )


ADD_EXECUTABLE( dokuro_test
	${DOKURO_TEST_SRC_FILES}
	${DOKURO_TEST_BASE_SRC_FILES}
	${DOKURO_TEST_GAME_SRC_FILES}
	${DOKURO_TEST_UTIL_SRC_FILES}
	"${DOKURO_SRC_DIR}/stdafx.h"
    "${DOKURO_SRC_DIR}/stdafx.cpp" )

SOURCE_GROUP( "" FILES ${DOKURO_TEST_SRC_FILES} )
SOURCE_GROUP( base FILES ${DOKURO_TEST_BASE_SRC_FILES} )
SOURCE_GROUP( game FILES ${DOKURO_TEST_GAME_SRC_FILES} )
SOURCE_GROUP( util FILES ${DOKURO_TEST_UTIL_SRC_FILES} )

TARGET_LINK_LIBRARIES( dokuro_test 
	${DOKURO_LINK_LIBS} 
	${IRRLICHT_LINK_LIBS} 
	gtest
	dokuro )

MSVC_SET_PCH( dokuro_test
    "${DOKURO_SRC_DIR}/stdafx.h"
    "${DOKURO_SRC_DIR}/stdafx.cpp")

USE_CPP11( TARGET dokuro LibOVR gtest dokuro_exe dokuro_test )

IF( APPLE )
	# For debug... OSX App bundle find file from app bundle existance path
	SET_TARGET_PROPERTIES( dokuro_exe PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR} )
ENDIF(  )
